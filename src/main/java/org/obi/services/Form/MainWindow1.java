/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.obi.services.Form;

import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.intellijthemes.FlatSolarizedDarkIJTheme;
import com.formdev.flatlaf.intellijthemes.FlatSolarizedLightIJTheme;
import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatGitHubDarkIJTheme;
import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatGitHubIJTheme;
import java.awt.Insets;
import java.awt.TrayIcon;
import java.beans.PropertyVetoException;
import org.obi.services.util.Ico;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import org.obi.services.Form.output.CapturePane;
import org.obi.services.Form.output.StreamCapturer;
import org.obi.services.OBIServiceTrayIcon;
import org.obi.services.app.ManagerControllerThread;
import org.obi.services.app.TagsCollectorThread;
import org.obi.services.listener.TagsCollectorThreadListener;
import org.obi.services.model.DatabaseModel;
import org.obi.services.util.Util;



/**
 *
 * @author r.hendrick
 */
public class MainWindow1 extends javax.swing.JFrame implements
        InternalFrameListener, TagsCollectorThreadListener {

    private SettingsApplicationFrame settingsApplicationFrame = null;
    private ConnectionFrame connectionsFrame = null;

    private ArrayList<InternalFrameListener> internalFrameListeners = new ArrayList<>();

    public void addListener(InternalFrameListener listener) {
        internalFrameListeners.add(listener);
    }

    /**
     * Tray Icon System to be use in this class
     */
    TrayIcon trayIcon;

    /**
     * Manager Controller Thread Manage all thread generated
     */
    ManagerControllerThread managerCtrlThread;

    /**
     * Main Window Constructor
     *
     *
     * @param trayIcon take specify trayIcon in use.
     * @param managerCtrlThread the thread manager
     */
    public MainWindow1(TrayIcon trayIcon, ManagerControllerThread managerCtrlThread) {
        initComponents();
        this.trayIcon = trayIcon;
        this.managerCtrlThread = managerCtrlThread;
        this.managerCtrlThread.addClientListener(this);

        CapturePane capturePane = new CapturePane();
        outputDesktopPane.add(capturePane);
        PrintStream ps = System.out;
        System.setOut(new PrintStream(new StreamCapturer("obi", capturePane, ps)));

        Util.out("MainWindow : Constructor >> Started ...");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainToolBar = new javax.swing.JToolBar();
        tbBtnExit = new javax.swing.JButton();
        vSplitPane = new javax.swing.JSplitPane();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        mainDesktopPane = new javax.swing.JDesktopPane();
        outputInternalFrame = new javax.swing.JInternalFrame();
        outputDesktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        exitAppMenuItem1 = new javax.swing.JMenuItem();
        displayMenu = new javax.swing.JMenu();
        databaseInfoMenu = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        connectionsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        startTagCollectorMenuItem = new javax.swing.JMenuItem();
        stopTagCollectorMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        configMenuItem = new javax.swing.JMenuItem();
        themeMenu = new javax.swing.JMenu();
        metalMenuItem = new javax.swing.JMenuItem();
        nimbusMenuItem = new javax.swing.JMenuItem();
        CDEMotifMenuItem = new javax.swing.JMenuItem();
        windowMenuItem = new javax.swing.JMenuItem();
        windowClassicMenuItem = new javax.swing.JMenuItem();
        themeSeparator = new javax.swing.JPopupMenu.Separator();
        flatLightLafMenuItem = new javax.swing.JMenuItem();
        flatDarkLafMenuItem = new javax.swing.JMenuItem();
        flatGitHubLightMenuItem = new javax.swing.JMenuItem();
        flatGitHubDarkMenuItem = new javax.swing.JMenuItem();
        flatSolorizedLightMenuItem = new javax.swing.JMenuItem();
        flatSolorizedDarkMenuItem = new javax.swing.JMenuItem();
        themeSeparator1 = new javax.swing.JPopupMenu.Separator();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("bundles/Fr_fr"); // NOI18N
        setTitle(bundle.getString("AppVersion")); // NOI18N
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setIconImage(Ico.i16("/img/obi/obi-signet-dark.png", this).getImage()
        );
        setName("MainWindowFrame"); // NOI18N
        setSize(new java.awt.Dimension(1024, 680));

        mainToolBar.setRollover(true);

        tbBtnExit.setIcon(Ico.i48("/img/oz/exit.png", this));
        tbBtnExit.setText("Fermer");
        tbBtnExit.setFocusable(false);
        tbBtnExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbBtnExit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbBtnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbBtnExitActionPerformed(evt);
            }
        });
        mainToolBar.add(tbBtnExit);

        vSplitPane.setDividerLocation(350);
        vSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        vSplitPane.setToolTipText("");
        vSplitPane.setLastDividerLocation(350);
        vSplitPane.setName(""); // NOI18N

        jDesktopPane1.setLayout(new java.awt.BorderLayout());

        mainDesktopPane.setMinimumSize(new java.awt.Dimension(50, 350));

        javax.swing.GroupLayout mainDesktopPaneLayout = new javax.swing.GroupLayout(mainDesktopPane);
        mainDesktopPane.setLayout(mainDesktopPaneLayout);
        mainDesktopPaneLayout.setHorizontalGroup(
            mainDesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 863, Short.MAX_VALUE)
        );
        mainDesktopPaneLayout.setVerticalGroup(
            mainDesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );

        jDesktopPane1.add(mainDesktopPane, java.awt.BorderLayout.CENTER);

        outputInternalFrame.setTitle("Evènement de sortie");
        outputInternalFrame.setToolTipText("");
        outputInternalFrame.setFrameIcon(Ico.i16("/img/std/View.png", this)
        );
        outputInternalFrame.setVisible(true);

        outputDesktopPane.setLayout(new javax.swing.BoxLayout(outputDesktopPane, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout outputInternalFrameLayout = new javax.swing.GroupLayout(outputInternalFrame.getContentPane());
        outputInternalFrame.getContentPane().setLayout(outputInternalFrameLayout);
        outputInternalFrameLayout.setHorizontalGroup(
            outputInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputDesktopPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        outputInternalFrameLayout.setVerticalGroup(
            outputInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputDesktopPane)
        );

        jDesktopPane1.add(outputInternalFrame, java.awt.BorderLayout.PAGE_START);
        try {
            outputInternalFrame.setMaximum(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        fileMenu.setMnemonic('f');
        fileMenu.setText(bundle.getString("MenuFile")); // NOI18N
        fileMenu.setToolTipText("Gestion de l'application");

        exitMenuItem.setIcon(Ico.i16("/img/oz/exit.png",this)
        );
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setToolTipText("Permet de quitter l'application");
        exitMenuItem.setLabel("Réduire Tray");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        exitAppMenuItem1.setIcon(Ico.i16("/img/oz/exit.png",this)
        );
        exitAppMenuItem1.setMnemonic('x');
        exitAppMenuItem1.setToolTipText("Permet de quitter l'application");
        exitAppMenuItem1.setLabel("Quitter");
        exitAppMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitAppMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(exitAppMenuItem1);

        menuBar.add(fileMenu);

        displayMenu.setMnemonic('h');
        displayMenu.setText(bundle.getString("Window")); // NOI18N

        databaseInfoMenu.setIcon(Ico.i16("/img/std/DlgInfos.png", this));
        databaseInfoMenu.setMnemonic('c');
        databaseInfoMenu.setText(bundle.getString("showBDDInfos")); // NOI18N
        databaseInfoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseInfoMenuActionPerformed(evt);
            }
        });
        displayMenu.add(databaseInfoMenu);

        menuBar.add(displayMenu);

        toolsMenu.setMnemonic('h');
        toolsMenu.setText(bundle.getString("Tools")); // NOI18N

        connectionsMenuItem.setIcon(Ico.i16("/img/std/Refresh.png", this));
        connectionsMenuItem.setMnemonic('c');
        connectionsMenuItem.setText(bundle.getString("toolsS7Connections")); // NOI18N
        connectionsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionsMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(connectionsMenuItem);
        toolsMenu.add(jSeparator1);

        startTagCollectorMenuItem.setIcon(Ico.i16("/img/std/onOff/start.png", this));
        startTagCollectorMenuItem.setMnemonic('c');
        startTagCollectorMenuItem.setText(bundle.getString("toolsStartTagsCollector")); // NOI18N
        startTagCollectorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTagCollectorMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(startTagCollectorMenuItem);

        stopTagCollectorMenuItem.setIcon(Ico.i16("/img/std/onOff/stop.png", this));
        stopTagCollectorMenuItem.setMnemonic('c');
        stopTagCollectorMenuItem.setText(bundle.getString("toolsStopTagsCollector")); // NOI18N
        stopTagCollectorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopTagCollectorMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(stopTagCollectorMenuItem);

        menuBar.add(toolsMenu);

        editMenu.setMnemonic('e');
        editMenu.setText(bundle.getString("MenuConfig")); // NOI18N

        configMenuItem.setIcon(Ico.i16("/img/oz/config.png", this));
        configMenuItem.setMnemonic('t');
        configMenuItem.setText("Application");
        configMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(configMenuItem);

        menuBar.add(editMenu);

        themeMenu.setText("Thèmes");

        metalMenuItem.setMnemonic('t');
        metalMenuItem.setText("Metal");
        metalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metalMenuItemActionPerformed(evt);
            }
        });
        themeMenu.add(metalMenuItem);

        nimbusMenuItem.setMnemonic('t');
        nimbusMenuItem.setText("Nimbus");
        nimbusMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nimbusMenuItemActionPerformed(evt);
            }
        });
        themeMenu.add(nimbusMenuItem);

        CDEMotifMenuItem.setMnemonic('t');
        CDEMotifMenuItem.setText("CDE/Motif");
        CDEMotifMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CDEMotifMenuItemActionPerformed(evt);
            }
        });
        themeMenu.add(CDEMotifMenuItem);

        windowMenuItem.setMnemonic('t');
        windowMenuItem.setText("Windows");
        windowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowMenuItemActionPerformed(evt);
            }
        });
        themeMenu.add(windowMenuItem);

        windowClassicMenuItem.setMnemonic('t');
        windowClassicMenuItem.setText("Windows Classic");
        windowClassicMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowClassicMenuItemActionPerformed(evt);
            }
        });
        themeMenu.add(windowClassicMenuItem);
        themeMenu.add(themeSeparator);

        flatLightLafMenuItem.setMnemonic('t');
        flatLightLafMenuItem.setText("Flat - Light");
        flatLightLafMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flatLightLafMenuItemActionPerformed(evt);
            }
        });
        themeMenu.add(flatLightLafMenuItem);

        flatDarkLafMenuItem.setMnemonic('t');
        flatDarkLafMenuItem.setText("Flat - Dark");
        flatDarkLafMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flatDarkLafMenuItemActionPerformed(evt);
            }
        });
        themeMenu.add(flatDarkLafMenuItem);

        flatGitHubLightMenuItem.setMnemonic('t');
        flatGitHubLightMenuItem.setText("Flat - GitHub Light");
        flatGitHubLightMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flatGitHubLightMenuItemActionPerformed(evt);
            }
        });
        themeMenu.add(flatGitHubLightMenuItem);

        flatGitHubDarkMenuItem.setMnemonic('t');
        flatGitHubDarkMenuItem.setText("Flat - GitHub Dark");
        flatGitHubDarkMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flatGitHubDarkMenuItemActionPerformed(evt);
            }
        });
        themeMenu.add(flatGitHubDarkMenuItem);

        flatSolorizedLightMenuItem.setMnemonic('t');
        flatSolorizedLightMenuItem.setText("Flat - Solarized Light");
        flatSolorizedLightMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flatSolorizedLightMenuItemActionPerformed(evt);
            }
        });
        themeMenu.add(flatSolorizedLightMenuItem);

        flatSolorizedDarkMenuItem.setMnemonic('t');
        flatSolorizedDarkMenuItem.setText("Flat - Solarized Dark");
        flatSolorizedDarkMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flatSolorizedDarkMenuItemActionPerformed(evt);
            }
        });
        themeMenu.add(flatSolorizedDarkMenuItem);
        themeMenu.add(themeSeparator1);

        menuBar.add(themeMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText(bundle.getString("MenuHelp")); // NOI18N

        contentMenuItem.setIcon(Ico.i16("/img/std/DlgInfos.png", this));
        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText(bundle.getString("MenuHelpDocs")); // NOI18N
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText(bundle.getString("MenuHelpAbout")); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jDesktopPane1)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(vSplitPane))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(209, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 268, Short.MAX_VALUE)
                    .addComponent(vSplitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit Menu
     *
     * Allow to dispose window and leave it working background
     *
     * @param evt event
     */
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        this.dispose();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * Configuration Menu
     *
     * Allow to specify some setting
     *
     * @param evt event
     */
    private void configMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configMenuItemActionPerformed
        if (SettingsApplicationFrame.openFrameCount == 0) {
            settingsApplicationFrame = new SettingsApplicationFrame();
            mainDesktopPane.add(settingsApplicationFrame);
        } else {
            revalidate();
            repaint();
        }
        settingsApplicationFrame.setVisible(true);
        try {
            settingsApplicationFrame.setMaximum(true);
            settingsApplicationFrame.setSelected(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(MainWindow1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_configMenuItemActionPerformed

    private void metalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metalMenuItemActionPerformed
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
            pack();
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            Util.out(e.getLocalizedMessage());
        }
    }//GEN-LAST:event_metalMenuItemActionPerformed

    private void nimbusMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nimbusMenuItemActionPerformed
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
            pack();
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            Util.out(e.getLocalizedMessage());
        }
    }//GEN-LAST:event_nimbusMenuItemActionPerformed

    private void CDEMotifMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CDEMotifMenuItemActionPerformed
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
            pack();
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            Util.out(e.getLocalizedMessage());
        }
    }//GEN-LAST:event_CDEMotifMenuItemActionPerformed

    private void windowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowMenuItemActionPerformed
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
            pack();
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            Util.out(e.getLocalizedMessage());
        }
    }//GEN-LAST:event_windowMenuItemActionPerformed

    private void windowClassicMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowClassicMenuItemActionPerformed
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
            pack();
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            Util.out(e.getLocalizedMessage());
        }
    }//GEN-LAST:event_windowClassicMenuItemActionPerformed

    private void tbBtnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbBtnExitActionPerformed
        exitMenuItemActionPerformed(evt);
    }//GEN-LAST:event_tbBtnExitActionPerformed

    private void flatLightLafMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flatLightLafMenuItemActionPerformed
        try {
            UIManager.setLookAndFeel(new FlatLightLaf());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            Util.out(e.getLocalizedMessage());
        }
        UIManager.getDefaults().put("TabbedPane.contentBorderInsets", new Insets(0, 0, 0, 0));
        UIManager.getDefaults().put("TabbedPane.tabsOverlapBorder", true);

    }//GEN-LAST:event_flatLightLafMenuItemActionPerformed

    private void flatDarkLafMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flatDarkLafMenuItemActionPerformed
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            Util.out(e.getLocalizedMessage());
        }
        UIManager.getDefaults().put("TabbedPane.contentBorderInsets", new Insets(0, 0, 0, 0));
        UIManager.getDefaults().put("TabbedPane.tabsOverlapBorder", true);
    }//GEN-LAST:event_flatDarkLafMenuItemActionPerformed

    private void flatGitHubDarkMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flatGitHubDarkMenuItemActionPerformed
        try {
            UIManager.setLookAndFeel(new FlatGitHubDarkIJTheme());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            Util.out(e.getLocalizedMessage());
        }
        UIManager.getDefaults().put("TabbedPane.contentBorderInsets", new Insets(0, 0, 0, 0));
        UIManager.getDefaults().put("TabbedPane.tabsOverlapBorder", true);
    }//GEN-LAST:event_flatGitHubDarkMenuItemActionPerformed

    private void flatSolorizedDarkMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flatSolorizedDarkMenuItemActionPerformed
        try {
            UIManager.setLookAndFeel(new FlatSolarizedDarkIJTheme());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            Util.out(e.getLocalizedMessage());
        }
        UIManager.getDefaults().put("TabbedPane.contentBorderInsets", new Insets(0, 0, 0, 0));
        UIManager.getDefaults().put("TabbedPane.tabsOverlapBorder", true);
    }//GEN-LAST:event_flatSolorizedDarkMenuItemActionPerformed

    private void flatSolorizedLightMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flatSolorizedLightMenuItemActionPerformed
        try {
            UIManager.setLookAndFeel(new FlatSolarizedLightIJTheme());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            Util.out(e.getLocalizedMessage());
        }
        UIManager.getDefaults().put("TabbedPane.contentBorderInsets", new Insets(0, 0, 0, 0));
        UIManager.getDefaults().put("TabbedPane.tabsOverlapBorder", true);
    }//GEN-LAST:event_flatSolorizedLightMenuItemActionPerformed

    private void flatGitHubLightMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flatGitHubLightMenuItemActionPerformed
        try {
            UIManager.setLookAndFeel(new FlatGitHubIJTheme());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            Util.out(e.getLocalizedMessage());
        }
        UIManager.getDefaults().put("TabbedPane.contentBorderInsets", new Insets(0, 0, 0, 0));
        UIManager.getDefaults().put("TabbedPane.tabsOverlapBorder", true);

    }//GEN-LAST:event_flatGitHubLightMenuItemActionPerformed

    private void databaseInfoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseInfoMenuActionPerformed
        Connection conn = null;

        try {
            conn = DatabaseFrame.toConnection(DatabaseModel.databaseModel());

            if (conn != null) {
                DatabaseMetaData dm = (DatabaseMetaData) conn.getMetaData();
                System.out.println("Driver name: " + dm.getDriverName());
                System.out.println("Driver version: " + dm.getDriverVersion());
                System.out.println("Product name: " + dm.getDatabaseProductName());
                System.out.println("Product version: " + dm.getDatabaseProductVersion());

                DatabaseInformations dbiForm = new DatabaseInformations(this, true);
                dbiForm.doUpdateWithDatabaseMetaData(dm);
                dbiForm.setLocationRelativeTo(this.mainDesktopPane);
                dbiForm.setVisible(true);

            } else {
                System.out.println("Imoka Service >> Unable to connect !");
            }
        } catch (SQLException ex) {
            Logger.getLogger(OBIServiceTrayIcon.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null && !conn.isClosed()) {
                    conn.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_databaseInfoMenuActionPerformed

    private void connectionsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionsMenuItemActionPerformed
        if (ConnectionFrame.openFrameCount == 0) {
            connectionsFrame = new ConnectionFrame();
            mainDesktopPane.add(connectionsFrame);
        } else {
            revalidate();
            repaint();
        }
        connectionsFrame.setVisible(true);
        try {
            connectionsFrame.setMaximum(true);
            connectionsFrame.setSelected(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(MainWindow1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_connectionsMenuItemActionPerformed

    private void startTagCollectorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTagCollectorMenuItemActionPerformed
        if (!managerCtrlThread.isRunning()) {
            managerCtrlThread.doRelease();
            if (!managerCtrlThread.isAlive()) {
                managerCtrlThread.start();
            } else {
//                managerCtrlThread.notify();
            }
            // Done in TagsCollectorThreadListener
//            trayIcon.displayMessage("OBI",
//                    "Tags collector a démarré !",
//                    TrayIcon.MessageType.INFO);
        } else {
            trayIcon.displayMessage("OBI",
                    "Processus is already running. Please stop before start !",
                    TrayIcon.MessageType.WARNING);
            Util.out("Processus is already running. Please stop before start !");
        }
    }//GEN-LAST:event_startTagCollectorMenuItemActionPerformed

    private void stopTagCollectorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopTagCollectorMenuItemActionPerformed
        if (managerCtrlThread.isRunning()) {
            managerCtrlThread.doStop();
            // Done in tagCollectorThreadListener
//            trayIcon.displayMessage("OBI",
//                    "Tags collector est arrêté !",
//                    TrayIcon.MessageType.INFO);
        } else {
            trayIcon.displayMessage("OBI",
                    "Processus is already stopped. Please start before any stop !",
                    TrayIcon.MessageType.WARNING);
            Util.out("Processus is already stopped. Please start before any stop !");
        }
    }//GEN-LAST:event_stopTagCollectorMenuItemActionPerformed

    /**
     * Exit Application Allow to exit totaly the application
     *
     * @param evt event
     */
    private void exitAppMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitAppMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitAppMenuItem1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CDEMotifMenuItem;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem configMenuItem;
    private javax.swing.JMenuItem connectionsMenuItem;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JMenuItem databaseInfoMenu;
    private javax.swing.JMenu displayMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitAppMenuItem1;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem flatDarkLafMenuItem;
    private javax.swing.JMenuItem flatGitHubDarkMenuItem;
    private javax.swing.JMenuItem flatGitHubLightMenuItem;
    private javax.swing.JMenuItem flatLightLafMenuItem;
    private javax.swing.JMenuItem flatSolorizedDarkMenuItem;
    private javax.swing.JMenuItem flatSolorizedLightMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JDesktopPane mainDesktopPane;
    private javax.swing.JToolBar mainToolBar;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem metalMenuItem;
    private javax.swing.JMenuItem nimbusMenuItem;
    private javax.swing.JDesktopPane outputDesktopPane;
    private javax.swing.JInternalFrame outputInternalFrame;
    private javax.swing.JMenuItem startTagCollectorMenuItem;
    private javax.swing.JMenuItem stopTagCollectorMenuItem;
    private javax.swing.JButton tbBtnExit;
    private javax.swing.JMenu themeMenu;
    private javax.swing.JPopupMenu.Separator themeSeparator;
    private javax.swing.JPopupMenu.Separator themeSeparator1;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JSplitPane vSplitPane;
    private javax.swing.JMenuItem windowClassicMenuItem;
    private javax.swing.JMenuItem windowMenuItem;
    // End of variables declaration//GEN-END:variables

    @Override
    public void internalFrameOpened(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameClosing(InternalFrameEvent e) {
        System.out.println("internalFrameClosing");
        JInternalFrame iframe = e.getInternalFrame();
        if (iframe instanceof ConnectionFrame) {
            ConnectionFrame.openFrameCount--;
            connectionsFrame = null;
        } else if (iframe instanceof SettingsApplicationFrame) {
            SettingsApplicationFrame.openFrameCount--;
            settingsApplicationFrame = null;
        }

    }

    @Override
    public void internalFrameClosed(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameIconified(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameDeiconified(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameActivated(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameDeactivated(InternalFrameEvent e) {
    }

    @Override
    public void onProcessingThread() {
        trayIcon.displayMessage("OBI",
                "Tags collector a démarré !",
                TrayIcon.MessageType.INFO);
    }

    @Override
    public void onOldingThread() {
        trayIcon.displayMessage("OBI",
                "Tags collector est arrêté !",
                TrayIcon.MessageType.INFO);
    }

    @Override
    public void onKillProcessThread(TagsCollectorThread m) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

}
